package {{.Package}}

import (
	"log"
	"{{.Module}}/utils"
	"github.com/google/uuid"
)

// Gorm{{ .Name | title }}Repository interface represent the repository
type Gorm{{ .Name | title }}Repository interface {
	Add{{ .Name | title }}(m *{{ .Name | title }}) (err error)
	Get{{ .Name | title }}ById(id uuid.UUID) (model {{ .Name | title }}, err error)
	Get{{ .Name | title }}ByFields(query {{ .Name | title }}) (model {{ .Name | title }}, err error)
	GetAll{{ .Name | title }}(query map[string]interface{}, order string,
		offset int, limit int) (models []{{ .Name | title }}, err error)
	Update{{ .Name | title }}ById(model *{{ .Name | title }}) (err error)
	Delete{{ .Name | title }}(id uuid.UUID) (err error)
	BatchInsert{{ .Name | title }}(models []{{ .Name | title }}) (err error)
}

type {{ .Name | title }}Repository struct {}

// Add{{ .Name | title }} insert a new {{ .Name | title }} into database and returns
// last inserted Id on success.
func (r {{ .Name | title }}Repository) Add{{ .Name | title }}(m *{{ .Name | title }}) (err error) {
	db := utils.GetInstance().GetDB()
	err = db.Create(m).Error
	return
}

// Get{{ .Name | title }}ById retrieves {{ .Name | title }} by Id. Returns error if
// Id doesn't exist
func (r {{ .Name | title }}Repository) Get{{ .Name | title }}ById(id uuid.UUID) (model {{ .Name | title }}, err error) {
	db := utils.GetInstance().GetDB()
	err = db.First(&model, "id = ?", id).Error
	return
}

// GetAll{{ .Name | title }} retrieves all {{ .Name | title }} matches certain condition. Returns empty list if
// no records exist
func (r {{ .Name | title }}Repository) GetAll{{ .Name | title }}(query map[string]interface{}, order string,
	offset int, limit int) (models []{{ .Name | title }}, err error) {
	log.Println("query :", query, " order:", order, " limit:", limit, "offset:", offset)
	db := utils.GetInstance().GetDB()
	err = db.Where(query).Where("owned_by = ?", middleware.UserId).Order(order).
		Limit(limit).Offset(offset).
		Find(&models).Error
	return
}

// Update{{ .Name | title }} updates {{ .Name | title }} by Id and returns error if
// the record to be updated doesn't exist
func (r {{ .Name | title }}Repository) Update{{ .Name | title }}ById(model *{{ .Name | title }}) (err error) {
	db := utils.GetInstance().GetDB()
	err = db.Save(model).Error
	return
}

// Delete{{ .Name | title }} deletes {{ .Name | title }} by Id and returns error if
// the record to be deleted doesn't exist
func (r {{ .Name | title }}Repository) Delete{{ .Name | title }}(id uuid.UUID) (err error) {
	db := utils.GetInstance().GetDB()
	err = db.Delete(new({{ .Name | title }}), id).Error
	return
}

//BatchInsert{{ .Name | title }} add a list of {{ .Name | title }}
func (r {{ .Name | title }}Repository) BatchInsert{{ .Name | title }}(models []{{ .Name | title }}) (err error) {
	db := utils.GetInstance().GetDB()
	err = db.Create(&models).Error
	return
}

func (r {{ .Name | title }}Repository) Get{{ .Name | title }}ByFields(query {{ .Name | title }}) (model {{ .Name | title }}, err error) {
	db := utils.GetInstance().GetDB()
	err = db.Where(query).Where("owned_by = ?", middleware.UserId).First(&model).Error
	return
}
