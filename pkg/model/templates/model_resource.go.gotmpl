package user

import (
	"errors"
	"net/http"
	"strconv"
	"strings"

	mid "my-go-layout/pkg/middleware"

	restfulspec "github.com/emicklei/go-restful-openapi/v2"
	restful "github.com/emicklei/go-restful/v3"
	"github.com/google/uuid"
	"gorm.io/gorm"
)

// UserResource is the REST layer to the User domain
type UserResource struct {
	db *gorm.DB
}

func New(con *gorm.DB) UserResource {
	return UserResource{db: con}
}

// WebService creates a new service that can handle REST requests for User resources.
func (u UserResource) WebService() *restful.WebService {
	ws := new(restful.WebService)
	ws.
		Path("/users").
		Consumes(restful.MIME_JSON, restful.MIME_XML).
		Produces(restful.MIME_JSON, restful.MIME_XML) // you can specify this per route as well

	tags := []string{"users"}

	ws.Route(ws.GET("/").To(u.findAllUsers).
		// docs
		Doc("get all users").
		Metadata(restfulspec.KeyOpenAPITags, tags).
		Param(ws.QueryParameter("query", "Filter. e.g. col1:v1,col2:v2").DataType("string").Required(false)).
		Param(ws.QueryParameter("query", "Filter. e.g. col1:v1,col2:v2").DataType("string").Required(false)).
		Param(ws.QueryParameter("order", "Order. e.g. col1 desc,col2").DataType("string").Required(false)).
		Param(ws.QueryParameter("offset", "Start position of result set. Must be an integer").DataType("string").Required(false)).
		Param(ws.QueryParameter("limit", "Limit the size of result set. Must be an integer").DataType("string").Required(false)).
		Writes([]User{}).
		Returns(200, "OK", []User{}))

	ws.Route(ws.GET("/{id}").Filter(mid.AuthzMiddleware).
		To(u.findUser).
		// docs
		Doc("get a user").
		Param(ws.PathParameter("id", "identifier of the user").DataType("string")).
		Metadata(restfulspec.KeyOpenAPITags, tags).
		Writes(User{}). // on the response
		Returns(200, "OK", User{}).
		Returns(404, "Not Found", nil))

	ws.Route(ws.PUT("/").To(u.updateUser).
		// docs
		Doc("update a user").
		Metadata(restfulspec.KeyOpenAPITags, tags).
		Reads(User{})) // from the request

	ws.Route(ws.POST("").To(u.createUser).
		// docs
		Doc("create a user").
		Metadata(restfulspec.KeyOpenAPITags, tags).
		Reads(User{})) // from the request

	ws.Route(ws.DELETE("/{id}").To(u.removeUser).
		// docs
		Doc("delete a user").
		Metadata(restfulspec.KeyOpenAPITags, tags).
		Param(ws.PathParameter("id", "identifier of the user").DataType("string")))

	return ws
}

// GET http://localhost:8080/users
//
func (u UserResource) findAllUsers(request *restful.Request, response *restful.Response) {
	var query = make(map[string]string)
	queryString := request.QueryParameter("query")
	// query: k:v,k:v
	if v := queryString; v != "" {
		for _, cond := range strings.Split(v, ",") {
			kv := strings.SplitN(cond, ":", 2)
			if len(kv) != 2 {
				response.WriteError(http.StatusInternalServerError, errors.New("Error: invalid query key/value pair"))
			}
			k, v := kv[0], kv[1]
			query[k] = v
		}
	}
	offset, _ := strconv.Atoi(request.QueryParameter("offset"))
	limit, _ := strconv.Atoi(request.QueryParameter("limit"))
	order := request.QueryParameter("order")
	if order == "" {
		order = "created_at desc"
	}
	list, err := GetAllUser(query, order, offset, limit, u.db)
	if err != nil {
		response.WriteError(http.StatusInternalServerError, err)
	}
	response.WriteEntity(list)
}

// GET http://localhost:8080/users/1
//
func (u UserResource) findUser(request *restful.Request, response *restful.Response) {
	uuid, _ := uuid.Parse(request.PathParameter("id"))
	user, err := GetUserById(uuid, u.db)

	if err == gorm.ErrRecordNotFound {
		response.WriteErrorString(http.StatusNotFound, "User could not be found.")
	} else {
		response.WriteEntity(user)
	}
}

// PUT http://localhost:8080/users
//
func (u *UserResource) updateUser(request *restful.Request, response *restful.Response) {
	var user User
	//usr := new(User)
	err := request.ReadEntity(&user)
	err = UpdateUserById(&user, u.db)
	if err == nil {
		response.WriteEntity(user)
	} else {
		response.WriteError(http.StatusInternalServerError, err)
	}
}

// POST http://localhost:8080/users/1
//
func (u *UserResource) createUser(request *restful.Request, response *restful.Response) {
	//usr := User{ID: request.PathParameter("user-id")}
	usr := User{}
	err := request.ReadEntity(&usr)
	if err == nil {
		response.WriteHeaderAndEntity(http.StatusCreated, usr)
	} else {
		response.WriteError(http.StatusInternalServerError, err)
	}
}

// DELETE http://localhost:8080/users/1
//
func (u *UserResource) removeUser(request *restful.Request, response *restful.Response) {
	uuid, _ := uuid.Parse(request.PathParameter("id"))
	err := DeleteUser(uuid, u.db)
	if err == nil {
		response.WriteHeader(http.StatusCreated)
	} else {
		response.WriteError(http.StatusInternalServerError, err)
	}
}
