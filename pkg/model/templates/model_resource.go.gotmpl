package {{ .Package }}

import (
	"errors"
	"net/http"
	"strconv"
	"strings"
	restful "github.com/emicklei/go-restful/v3"
	"github.com/google/uuid"
	"gorm.io/gorm"
)

// {{ .Name | title }}Resource is the REST layer to the {{ .Name | title }} domain
type {{ .Name | title }}Resource struct {
	db *gorm.DB
}

func New{{ .Name | title }}Resource(con *gorm.DB) {{ .Name | title }}Resource {
	return {{ .Name | title }}Resource{db: con}
}

// GET http://localhost:8080/{{ .Name | toLower }}s
//
func (u {{ .Name | title }}Resource) findAll{{ .Name | title }}s(request *restful.Request, response *restful.Response) {
	var query = make(map[string]string)
	queryString := request.QueryParameter("query")
	// query: k:v,k:v
	if v := queryString; v != "" {
		for _, cond := range strings.Split(v, ",") {
			kv := strings.SplitN(cond, ":", 2)
			if len(kv) != 2 {
				response.WriteError(http.StatusInternalServerError, errors.New("Error: invalid query key/value pair"))
			}
			k, v := kv[0], kv[1]
			query[k] = v
		}
	}
	offset, _ := strconv.Atoi(request.QueryParameter("offset"))
	limit, _ := strconv.Atoi(request.QueryParameter("limit"))
	order := request.QueryParameter("order")
	if order == "" {
		order = "created_at desc"
	}
	list, err := GetAll{{ .Name | title }}(query, order, offset, limit, u.db)
	if err != nil {
		response.WriteError(http.StatusInternalServerError, err)
	}
	response.WriteEntity(list)
}

// GET http://localhost:8080/{{ .Name | toLower }}s/1
//
func (u {{ .Name | title }}Resource) find{{ .Name | title }}(request *restful.Request, response *restful.Response) {
	uuid, _ := uuid.Parse(request.PathParameter("id"))
	{{ .Name | title }}, err := Get{{ .Name | title }}ById(uuid, u.db)

	if err == gorm.ErrRecordNotFound {
		response.WriteErrorString(http.StatusNotFound, "{{ .Name | title }} could not be found.")
	} else {
		response.WriteEntity({{ .Name | title }})
	}
}

// PUT http://localhost:8080/{{ .Name | toLower }}s
//
func (u *{{ .Name | title }}Resource) update{{ .Name | title }}(request *restful.Request, response *restful.Response) {
	var {{ .Name | title }} {{ .Name | title }}
	err := request.ReadEntity(&{{ .Name | title }})
	err = Update{{ .Name | title }}ById(&{{ .Name | title }}, u.db)
	if err == nil {
		response.WriteEntity({{ .Name | title }})
	} else {
		response.WriteError(http.StatusInternalServerError, err)
	}
}

// POST http://localhost:8080/{{ .Name | toLower }}s/1
//
func (u *{{ .Name | title }}Resource) create{{ .Name | title }}(request *restful.Request, response *restful.Response) {
	{{ .Name | toLower }} := {{ .Name | title }}{}
	err := request.ReadEntity(&{{ .Name | toLower }})
	Add{{ .Name | title }}(&{{ .Name | toLower }}, u.db)
	if err == nil {
		response.WriteHeaderAndEntity(http.StatusCreated, {{ .Name | toLower }})
	} else {
		response.WriteError(http.StatusInternalServerError, err)
	}
}

// DELETE http://localhost:8080/{{ .Name | toLower }}s/1
//
func (u *{{ .Name | title }}Resource) remove{{ .Name | title }}(request *restful.Request, response *restful.Response) {
	uuid, _ := uuid.Parse(request.PathParameter("id"))
	err := Delete{{ .Name | title }}(uuid, u.db)
	if err == nil {
		response.WriteHeader(http.StatusCreated)
	} else {
		response.WriteError(http.StatusInternalServerError, err)
	}
}
