package {{ .Package }}

import (
	"errors"
	"net/http"
	"strconv"
	"strings"
	mid "{{.Module}}/pkg/middleware"
	{{ if eq .AuthType "jwt" -}}
	"{{.Module}}/utils"
	{{- end }}
	restfulspec "github.com/emicklei/go-restful-openapi/v2"
	restful "github.com/emicklei/go-restful/v3"
	"github.com/google/uuid"
	"gorm.io/gorm"
)

var repo{{ .Name | title }} {{ .Name | title }}Repository

// {{ .Name | title }}Resource is the REST layer to the {{ .Name | title }} domain
type {{ .Name | title }}Resource struct {}

func New{{ .Name | title }}Resource() {{ .Name | title }}Resource {
	return {{ .Name | title }}Resource{}
}

// WebService creates a new service that can handle REST requests for {{ .Name | title }} resources.
func (u {{ .Name | title }}Resource) WebService() *restful.WebService {
	repo{{ .Name | title }} = {{ .Name | title }}Repository{}
	ws := new(restful.WebService)
	ws.
		Path("/{{.ApiVersion}}/{{ .Name | toLower }}").
		Consumes(restful.MIME_JSON, restful.MIME_XML).
		Produces(restful.MIME_JSON, restful.MIME_XML) // you can specify this per route as well

	tags := []string{"{{ .Name}}"}

	ws.Route(ws.GET("/all").To(u.findAll{{ .Name | title }}s).
		//Authorization middleware. To be implemented
		Filter(mid.AuthzMiddleware).
		{{ if eq .AuthType "jwt" -}}
		//Enable security
		Metadata(utils.SecurityDefinitionKey, utils.OAISecurity{Name: "jwt"}).
		// Jwt auth middleware
		Filter(mid.AuthJWT).
		{{- end }}
		// docs
		Doc("get all {{ .Name | toLower }}s").
		Metadata(restfulspec.KeyOpenAPITags, tags).
		Param(ws.QueryParameter("query", "Filter. e.g. col1:v1,col2:v2").DataType("string").Required(false)).
		Param(ws.QueryParameter("order", "Order. e.g. col1 desc,col2").DataType("string").Required(false)).
		Param(ws.QueryParameter("offset", "Start position of result set. Must be an integer").DataType("string").Required(false)).
		Param(ws.QueryParameter("limit", "Limit the size of result set. Must be an integer").DataType("string").Required(false)).
		Writes([]{{ .Name | title }}{}).
		Returns(200, "OK", []{{ .Name | title }}{}))

	ws.Route(ws.GET("/{id}").To(u.find{{ .Name | title }}).
		//Authorization middleware. To be implemented
		Filter(mid.AuthzMiddleware).
		{{ if eq .AuthType "jwt" -}}
		//Enable security
		Metadata(utils.SecurityDefinitionKey, utils.OAISecurity{Name: "jwt"}).
		// Jwt auth middleware
		Filter(mid.AuthJWT).
		{{- end }}
		// docs
		Doc("get a {{ .Name | title }}").
		Param(ws.PathParameter("id", "identifier of the {{ .Name | title }}").DataType("string")).
		Metadata(restfulspec.KeyOpenAPITags, tags).
		Writes({{ .Name | title }}{}). // on the response
		Returns(200, "OK", {{ .Name | title }}{}).
		Returns(404, "Not Found", nil))

	ws.Route(ws.PUT("/update").To(u.update{{ .Name | title }}).
		//Authorization middleware. To be implemented
		Filter(mid.AuthzMiddleware).
		{{ if eq .AuthType "jwt" -}}
		//Enable security
		Metadata(utils.SecurityDefinitionKey, utils.OAISecurity{Name: "jwt"}).
		// Jwt auth middleware
		Filter(mid.AuthJWT).
		{{- end }}
		// docs
		Doc("update a {{ .Name | title }}").
		Metadata(restfulspec.KeyOpenAPITags, tags).
		Reads({{ .Name | title }}{})) // from the request

	ws.Route(ws.POST("/create").To(u.create{{ .Name | title }}).
		//Authorization middleware. To be implemented
		Filter(mid.AuthzMiddleware).
		{{ if eq .AuthType "jwt" -}}
		//Enable security
		Metadata(utils.SecurityDefinitionKey, utils.OAISecurity{Name: "jwt"}).
		// Jwt auth middleware
		Filter(mid.AuthJWT).
		{{- end }}
		// docs
		Doc("create a {{ .Name | title }}").
		Metadata(restfulspec.KeyOpenAPITags, tags).
		Reads({{ .Name | title }}{})
		Returns(200, "OK", {{ .Name | title }}{}))) // from the request

	ws.Route(ws.DELETE("/{id}").To(u.remove{{ .Name | title }}).
		//Authorization middleware. To be implemented
		Filter(mid.AuthzMiddleware).
		{{ if eq .AuthType "jwt" -}}
		//Enable security
		Metadata(utils.SecurityDefinitionKey, utils.OAISecurity{Name: "jwt"}).
		// Jwt auth middleware
		Filter(mid.AuthJWT).
		{{- end }}
		// docs
		Doc("delete a {{ .Name | title }}").
		Metadata(restfulspec.KeyOpenAPITags, tags).
		Param(ws.PathParameter("id", "identifier of the {{ .Name | title }}").DataType("string")))

	return ws
}

// GET http://localhost:8080/{{ .Name | toLower }}s
//
func (u {{ .Name | title }}Resource) findAll{{ .Name | title }}s(request *restful.Request, response *restful.Response) {
	var query = make(map[string]interface{})
	queryString := request.QueryParameter("query")
	// query: k:v,k:v
	if v := queryString; v != "" {
		for _, cond := range strings.Split(v, ",") {
			kv := strings.SplitN(cond, ":", 2)
			if len(kv) != 2 {
				response.WriteError(http.StatusInternalServerError, errors.New("Error: invalid query key/value pair"))
			}
			k, v := kv[0], kv[1]
			query[k] = v
		}
	}
	offset, _ := strconv.Atoi(request.QueryParameter("offset"))
	limit, err := strconv.Atoi(request.QueryParameter("limit"))
	if err != nil {
		limit = 50
	}
	order := request.QueryParameter("order")
	list, err := GetAll{{ .Name | title }}Service(query, order, offset, limit, repo{{ .Name | title }})
	if err != nil {
		response.WriteError(http.StatusInternalServerError, err)
	}
	response.WriteEntity(list)
}

// GET http://localhost:8080/{{ .Name | toLower }}s/1
//
func (u {{ .Name | title }}Resource) find{{ .Name | title }}(request *restful.Request, response *restful.Response) {
	uuid, _ := uuid.Parse(request.PathParameter("id"))
	{{ .Name | toLower }}, err := Get{{ .Name | title }}ByIdService(uuid, repo{{ .Name | title }})

	if err == gorm.ErrRecordNotFound {
		response.WriteErrorString(http.StatusNotFound, "{{ .Name | title }} could not be found.")
	} else {
		response.WriteEntity({{ .Name | toLower }})
	}
}

// PUT http://localhost:8080/{{ .Name | toLower }}s
//
func (u *{{ .Name | title }}Resource) update{{ .Name | title }}(request *restful.Request, response *restful.Response) {
	var {{ .Name | toLower }} {{ .Name | title }}
	request.ReadEntity(&{{ .Name | title | toLower }})
	err := Update{{ .Name | title }}ByIdService(&{{ .Name | title | toLower}}, repo{{ .Name | title }})
	if err == nil {
		response.WriteEntity({{ .Name | toLower }})
	} else {
		response.WriteError(http.StatusInternalServerError, err)
	}
}

// POST http://localhost:8080/{{ .Name | toLower }}s/1
//
func (u *{{ .Name | title }}Resource) create{{ .Name | title }}(request *restful.Request, response *restful.Response) {
	{{ .Name | toLower }} := {{ .Name | title }}{}
	request.ReadEntity(&{{ .Name | toLower }})
	err := Add{{ .Name | title }}Service(&{{ .Name | toLower }}, repo{{ .Name | title }})
	if err == nil {
		response.WriteHeaderAndEntity(http.StatusCreated, {{ .Name | toLower }})
	} else {
		response.WriteError(http.StatusInternalServerError, err)
	}
}

// DELETE http://localhost:8080/{{ .Name | toLower }}s/1
//
func (u *{{ .Name | title }}Resource) remove{{ .Name | title }}(request *restful.Request, response *restful.Response) {
	uuid, _ := uuid.Parse(request.PathParameter("id"))
	err := Delete{{ .Name | title }}Service(uuid, repo{{ .Name | title }})
	if err == nil {
		response.WriteHeader(http.StatusCreated)
	} else {
		response.WriteError(http.StatusInternalServerError, err)
	}
}
