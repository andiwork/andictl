// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/{{ .Name | toLower }}/{{ .Name | toLower }}_repository.go

// Package tests is a generated GoMock package.
package tests

import (
	{{ .Name | toLower }} "{{.Module}}/pkg/{{ .Name | toLower }}"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockGorm{{ .Name | title }}Repository is a mock of Gorm{{ .Name | title }}Repository interface.
type MockGorm{{ .Name | title }}Repository struct {
	ctrl     *gomock.Controller
	recorder *MockGorm{{ .Name | title }}RepositoryMockRecorder
}

// MockGorm{{ .Name | title }}RepositoryMockRecorder is the mock recorder for MockGorm{{ .Name | title }}Repository.
type MockGorm{{ .Name | title }}RepositoryMockRecorder struct {
	mock *MockGorm{{ .Name | title }}Repository
}

// NewMockGorm{{ .Name | title }}Repository creates a new mock instance.
func NewMockGorm{{ .Name | title }}Repository(ctrl *gomock.Controller) *MockGorm{{ .Name | title }}Repository {
	mock := &MockGorm{{ .Name | title }}Repository{ctrl: ctrl}
	mock.recorder = &MockGorm{{ .Name | title }}RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGorm{{ .Name | title }}Repository) EXPECT() *MockGorm{{ .Name | title }}RepositoryMockRecorder {
	return m.recorder
}

// Add{{ .Name | title }} mocks base method.
func (m_2 *MockGorm{{ .Name | title }}Repository) Add{{ .Name | title }}(m *{{ .Name | toLower }}.{{ .Name | title }}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Add{{ .Name | title }}", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add{{ .Name | title }} indicates an expected call of Add{{ .Name | title }}.
func (mr *MockGorm{{ .Name | title }}RepositoryMockRecorder) Add{{ .Name | title }}(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add{{ .Name | title }}", reflect.TypeOf((*MockGorm{{ .Name | title }}Repository)(nil).Add{{ .Name | title }}), m)
}

// BatchInsert{{ .Name | title }} mocks base method.
func (m *MockGorm{{ .Name | title }}Repository) BatchInsert{{ .Name | title }}(models []{{ .Name | toLower }}.{{ .Name | title }}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsert{{ .Name | title }}", models)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchInsert{{ .Name | title }} indicates an expected call of BatchInsert{{ .Name | title }}.
func (mr *MockGorm{{ .Name | title }}RepositoryMockRecorder) BatchInsert{{ .Name | title }}(models interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsert{{ .Name | title }}", reflect.TypeOf((*MockGorm{{ .Name | title }}Repository)(nil).BatchInsert{{ .Name | title }}), models)
}


// Delete{{ .Name | title }} mocks base method.
func (m *MockGorm{{ .Name | title }}Repository) Delete{{ .Name | title }}(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete{{ .Name | title }}", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete{{ .Name | title }} indicates an expected call of Delete{{ .Name | title }}.
func (mr *MockGorm{{ .Name | title }}RepositoryMockRecorder) Delete{{ .Name | title }}(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete{{ .Name | title }}", reflect.TypeOf((*MockGorm{{ .Name | title }}Repository)(nil).Delete{{ .Name | title }}), id)
}

// Get{{ .Name | title }}ById mocks base method.
func (m *MockGorm{{ .Name | title }}Repository) Get{{ .Name | title }}ById(id uuid.UUID) ({{ .Name | toLower }}.{{ .Name | title }}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get{{ .Name | title }}ById", id)
	ret0, _ := ret[0].({{ .Name | toLower }}.{{ .Name | title }})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get{{ .Name | title }}ById indicates an expected call of Get{{ .Name | title }}ById.
func (mr *MockGorm{{ .Name | title }}RepositoryMockRecorder) Get{{ .Name | title }}ById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get{{ .Name | title }}ById", reflect.TypeOf((*MockGorm{{ .Name | title }}Repository)(nil).Get{{ .Name | title }}ById), id)
}

// GetAll{{ .Name | title }} mocks base method.
func (m *MockGorm{{ .Name | title }}Repository) GetAll{{ .Name | title }}(query map[string]interface{}, order string, offset, limit int) ([]{{ .Name | toLower }}.{{ .Name | title }}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll{{ .Name | title }}", query, order, offset, limit)
	ret0, _ := ret[0].([]{{ .Name | toLower }}.{{ .Name | title }})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll{{ .Name | title }} indicates an expected call of GetAll{{ .Name | title }}.
func (mr *MockGorm{{ .Name | title }}RepositoryMockRecorder) GetAll{{ .Name | title }}(query, order, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll{{ .Name | title }}", reflect.TypeOf((*MockGorm{{ .Name | title }}Repository)(nil).GetAll{{ .Name | title }}), query, order, offset, limit)
}

// Update{{ .Name | title }}ById mocks base method.
func (m *MockGorm{{ .Name | title }}Repository) Update{{ .Name | title }}ById(model *{{ .Name | toLower }}.{{ .Name | title }}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update{{ .Name | title }}ById", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update{{ .Name | title }}ById indicates an expected call of Update{{ .Name | title }}ById.
func (mr *MockGorm{{ .Name | title }}RepositoryMockRecorder) Update{{ .Name | title }}ById(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update{{ .Name | title }}ById", reflect.TypeOf((*MockGorm{{ .Name | title }}Repository)(nil).Update{{ .Name | title }}ById), model)
}
