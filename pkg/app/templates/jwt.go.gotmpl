package middleware

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	iam "github.com/andiwork/akouendy-accounts-sdk"
	jwt "github.com/dgrijalva/jwt-go"
	restful "github.com/emicklei/go-restful/v3"
	"github.com/spf13/viper"
)

var (
	jwtkey []byte
	UserId string
)

func init() {
	jwtkey = []byte(viper.GetString("jwtkey"))
}

// Check whether token is valid
func checkToken(kv []string) (bool, jwt.MapClaims) {
	claims := jwt.MapClaims{}
	token, err := jwt.ParseWithClaims(kv[1], claims, func(token *jwt.Token) (interface{}, error) {
		return []byte(jwtkey), nil
	})

	if token.Valid {
		for key, val := range claims {
			fmt.Printf("Key: %v, value: %v\n", key, val)
		}
		return true, claims
	} else if ve, ok := err.(*jwt.ValidationError); ok {
		if ve.Errors&jwt.ValidationErrorMalformed != 0 {
			log.Println("That's not even a token")
		} else if ve.Errors&(jwt.ValidationErrorExpired|jwt.ValidationErrorNotValidYet) != 0 {
			// Token is either expired or not active yet
			log.Println("Timing is everything")
		} else if jwt.ValidationErrorIssuedAt != 0 {
			/*
				for key, val := range claims {
					fmt.Printf("Key: %v, value: %v\n", key, val)
				}*/
			return true, claims
		} else {
			log.Println("ValidationError couldn't handle this token:", err)
		}
	} else {
		log.Println("Couldn't handle this token:", err)
	}

	return false, nil
}
func AuthJWT(req *restful.Request, resp *restful.Response, chain *restful.FilterChain) {
	authHeader := req.HeaderParameter("Authorization")
	if viper.GetBool("devmode") {
		log.Println("Jwt token received:", authHeader)
	}

	authHeaderSlice := strings.Split(authHeader, " ")
	if len(authHeaderSlice) != 2 || authHeaderSlice[0] != "Bearer" || len(authHeaderSlice[1]) < 10{
		resp.WriteErrorString(401, "401: Bad request. Provide token in format : Bearer TokenYXJKSMMM")
		return
	}
	b, claims := checkToken(authHeaderSlice)
	if !b {
		resp.WriteErrorString(401, "401: Not Authorized")
		return
	} else {
		if viper.GetBool("devmode") {
			for k, v := range claims {
				log.Println("claims k,v :", k, v)
			}
		}

		UserId = claims["sub"].(string)
		_, ok := claims["admin"]
		if !ok {
			user, err := iam.GetUserId(UserId, authHeader, viper.GetString("user-profile-url"))
			if err != nil {
				resp.WriteErrorString(401, "401: Not Authorized")
				return
			}
			UserId = user.PublicID
		}
		xSudo, _ := strconv.ParseBool(req.QueryParameter("Xsudo"))

		if UserId == viper.GetString("shadowUserId") && xSudo {
			UserId = req.QueryParameter("Xshadow")
		}

	}
	chain.ProcessFilter(req, resp)
}
